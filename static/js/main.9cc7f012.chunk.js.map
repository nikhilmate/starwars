{"version":3,"sources":["Xhr.js","utils.js","ApiServices.js","Actions.js","components/Header.js","components/InputField.js","components/DefaultPersons.js","components/PersonTable.js","components/PersonLoader.js","components/PersonDetails.js","App.js","serviceWorker.js","Store.js","index.js"],"names":["url","config","headers","body","JSON","stringify","fetch","then","res","status","Promise","reject","resolve","json","err","console","log","isEmpty","obj","prop","hasOwnProperty","getIdFromUrl","tempId","replace","BASE","getPeople","arr","resIndex","i","Xhr","results","map","person","id","catch","getContent","urlArr","result","length","push","getPerson","GET_PEOPLE","dispatch","type","localPeopleData","localStorage","getItem","newPerObj","persons","peopleData","setItem","error","data","tempParsed","parse","GET_PERSON","notPresent","localData","Object","keys","localPerson","pdListTemp","films","species","homeworld","mov","movies","spec","homeworldData","className","src","alt","connect","state","personID","SET_PERSON","props","useState","input","setInput","useEffect","Fragment","placeholder","onChange","e","target","value","people","setPeople","key","indx","pRow","name","gender","data-pid","onClick","preventDefault","currentTarget","getAttribute","setViewId","personData","setPerson","speciesData","setSpeciesData","filmsData","setFilmsData","setHome","birth_year","height","mass","setContent","eye_color","hair_color","skin_color","sort","a","b","release_date","split","val","index","title","loaderState","getPersonState","setLoaderState","personError","setLoader","setError","mapDispatchToProps","setId","toggleWidgetState","setToggleWidgetState","getPersonSubmit","Header","isNaN","parseInt","disabled","defaultList","document","querySelector","classList","add","remove","toggleWidget","Boolean","window","location","hostname","match","initState","getPeopleState","swReducer","action","assign","undefined","store","createStore","applyMiddleware","thunk","tempInterval","setInterval","getState","clearInterval","subscribe","Main","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cc7f012.chunk.js","sourcesContent":["export default function(url, config = {}) {\r\n  config.headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  };\r\n  if(config.body) config.body = JSON.stringify(config.body);\r\n  \r\n  try {\r\n    return fetch(url, config).then(res => {\r\n      if(res.status >= 300) return Promise.reject(res);\r\n      if(res.status === 204) return Promise.resolve();\r\n      return Promise.resolve(res.json());\r\n    });\r\n  } catch(err) {\r\n    console.log(err);\r\n    return err;\r\n  }\r\n}","// import Xhr from './Xhr';\r\n\r\nexport function isEmpty(obj) {\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return JSON.stringify(obj) === JSON.stringify({});\r\n}\r\n\r\n// export function fetchPeopleData(){\r\n//   var \r\n// }\r\nexport function getIdFromUrl(url) {\r\n  if (typeof url === 'string') {\r\n    var tempId = url.replace(\"https://swapi.co/api/people/\", \"\");\r\n    tempId = tempId.replace(\"/\", \"\");\r\n    return tempId;\r\n  } else {\r\n    return false;\r\n  };\r\n}\r\n\r\nexport function setLocalPeopleData(res) {\r\n  var getList = localStorage.getItem(\"personList\");\r\n  var globalObj = {};\r\n  var idListTemp = [];\r\n  var pdListTemp = [];\r\n  if (getList) {\r\n    var parsedList = getList !== \"\" ? JSON.parse(getList) : false;\r\n    if (parsedList && parsedList.pdList.length > 0) {\r\n      pdListTemp = parsedList.pdList;\r\n      idListTemp = parsedList.idList;\r\n    }\r\n  }\r\n  idListTemp = idListTemp.concat([getIdFromUrl(res.url)]);\r\n  pdListTemp = pdListTemp.concat([res]);\r\n  globalObj = {\r\n    idList: idListTemp,\r\n    pdList: pdListTemp\r\n  };\r\n  localStorage.setItem(\"personList\", JSON.stringify(globalObj));\r\n}","import Xhr from './Xhr';\r\nimport { getIdFromUrl } from './utils';\r\n\r\nconst BASE = 'https://swapi.co/api/';\r\n\r\nexport const getPeople = () => {\r\n\tvar promise = new Promise(function(resolve, reject){\r\n\t\tvar arr = {}, resIndex = 0;\r\n\t\tfor (var i = 1; i < 10; i++) {\r\n\t\t\tXhr(`${BASE}people/?page=${i}`)\r\n\t\t\t  .then(res => {\r\n\t\t\t\t\r\n\t\t\t\tres.results.map(person => {\r\n\t\t\t\t\tvar id = getIdFromUrl(person.url);\r\n\t\t\t\t\tarr[id] = person;\r\n\t\t\t\t\t// console.log(arr);\r\n\t\t\t\t});\r\n\t\t\t\t// var indexTemp = res.next != null ? parseInt(res.next.replace(\"https://swapi.co/api/people/?page=\", \"\")) - 2 : 9;\r\n\t\t\t\t// arr[indexTemp] = res;\r\n\t\t\t\t++resIndex;\r\n\t\t\t\t// arr[`${resIndex}`] = res;\r\n\t\t\t\tif (resIndex === 9) {\r\n\t\t\t\t\tresolve(arr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\t++resIndex;\r\n\t\t\t\tif (resIndex === 9) {\r\n\t\t\t\t\tresolve(arr);\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t\t}\r\n\t});\r\n\treturn promise;\r\n};\r\n\r\n// Xhr(`${BASE}people/?page=${id}`);\r\n\r\nexport const getContent = (urlArr) => {\r\n\tvar promise = new Promise(function(resolve, reject){\r\n\t\tif (typeof urlArr === 'string') {\r\n\t\t\tvar result = {};\r\n\t\t\tXhr(urlArr)\r\n\t\t\t.then(res => {\r\n\t\t\t\tresult = res;\r\n\t\t\t\tresolve(result);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\t// arr.push({});\r\n\t\t\t\tresolve(result);\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tvar arr = [], resIndex = 0;\r\n\t\t\tfor (var i = 0; i < urlArr.length; i++) {\r\n\t\t\t\tXhr(urlArr[i])\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\t++resIndex;\r\n\t\t\t\t\tarr.push(res);\r\n\t\t\t\t\tif (resIndex === urlArr.length) {\r\n\t\t\t\t\t\tresolve(arr);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\t// arr.push({});\r\n\t\t\t\t\t++resIndex;\r\n\t\t\t\t\tif (resIndex === urlArr.length) {\r\n\t\t\t\t\t\tresolve(arr);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn promise;\r\n    \r\n\t// return arr;\r\n};\r\nexport const getPerson = (id) => Xhr(`${BASE}people/${id}`);","import { getPeople, getPerson, getContent } from './ApiServices';\r\nimport { getIdFromUrl } from './utils';\r\n\r\nexport function GET_PEOPLE() {\r\n  return dispatch => {\r\n    dispatch({ type: 'CHANGE_PEOPLE_LOADER_STATE', status: true });\r\n    const localPeopleData = localStorage.getItem(\"peopleData\");\r\n    if(localPeopleData) {\r\n      let tempParsed = JSON.parse(localPeopleData);\r\n      dispatch({ type: 'ADD_PERSONS', persons: tempParsed });  \r\n    } else {\r\n      return getPeople()\r\n      .then(res => {\r\n        var newPerObj = res;\r\n        // res.map((page, index) => {\r\n        //   newPerObj[index] = page;\r\n        // });\r\n        dispatch({ type: 'ADD_PERSONS', persons: newPerObj });\r\n        var peopleData = JSON.stringify(newPerObj);\r\n        localStorage.setItem(\"peopleData\", peopleData);\r\n      })\r\n      .catch(error => \r\n        dispatch({ type: 'STATE_PEOPLE_ERROR', data: error })\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function GET_PERSON(id) {\r\n  return (dispatch) => {\r\n    dispatch({ type: 'CHANGE_PERSON_LOADER_STATE', status: true });\r\n    var notPresent = true;\r\n    var localData = localStorage.getItem(\"peopleData\");\r\n    if (localData) {\r\n      var peopleData = JSON.parse(localData);\r\n      if (peopleData && Object.keys(peopleData).length > 0) {\r\n        var localPerson = peopleData[id];\r\n        if (localPerson && Object.keys(localPerson).length > 0) {\r\n            notPresent = false;\r\n            dispatch({ type: 'CHANGE_PERSON_DATA', data: localPerson });\r\n            // var localMoviesData = localStorage.getItem(\"peopleMovies\");\r\n            // if (localMoviesData) {\r\n            //   var parsedMov = JSON.parse(localMoviesData);\r\n            //   if (Object.keys(parsedMov).length > 0) {\r\n            //     Object.keys(parsedMov).map(());\r\n            //   }\r\n            // }\r\n            let pdListTemp = localPerson;\r\n            let films = pdListTemp.films ? pdListTemp.films : [];\r\n            let species = pdListTemp.species ? pdListTemp.species : [];\r\n            let homeworld = pdListTemp.homeworld !== \"\" ? pdListTemp.homeworld : \"\";\r\n\r\n            if (films.length > 0) {\r\n              getContent(films)\r\n                .then(mov => {\r\n                  dispatch({ type: 'SET_MOVIES', movies: mov });\r\n                });\r\n            }\r\n            if (species.length > 0) {\r\n              getContent(species)\r\n                .then(spec => {\r\n                  dispatch({ type: 'SET_SPECIES', species : spec });\r\n                });\r\n            }\r\n            if (homeworld) {\r\n              getContent(homeworld)\r\n                .then(homeworldData => {\r\n                  dispatch({ type: 'SET_HOMEWORLD', homeworld : homeworldData });\r\n                });\r\n            }\r\n        }\r\n        /*\r\n        peopleData[objKey].map(column => {\r\n          column.results.map(row => {\r\n            var custId =  getIdFromUrl(row.url);\r\n            if (id === custId) {\r\n              notPresent = false;\r\n              dispatch({ type: 'CHANGE_PERSON_DATA', data: row });\r\n              let pdListTemp = row;\r\n              let films = pdListTemp.films ? pdListTemp.films : [];\r\n              let species = pdListTemp.species ? pdListTemp.species : [];\r\n\r\n              if (films.length > 0) {\r\n                getContent(films)\r\n                  .then(mov => {\r\n                    dispatch({ type: 'SET_MOVIES', movies: mov });\r\n                  });\r\n              }\r\n              if (species.length > 0) {\r\n                getContent(species)\r\n                  .then(spec => {\r\n                    dispatch({ type: 'SET_SPECIES', species : spec });\r\n                  });\r\n              }\r\n            }\r\n          })\r\n        })\r\n        */\r\n      }\r\n    }\r\n    if (notPresent) {\r\n      return getPerson(id)\r\n      .then(res => {\r\n        dispatch({ type: 'CHANGE_PERSON_DATA', data: res });\r\n        var films = res.films || [];\r\n        var species = res.species || [];\r\n        let homeworld = res.homeworld !== \"\" ? res.homeworld : \"\";\r\n        if (films.length > 0) {    \r\n          getContent(films)\r\n            .then(mov => {\r\n              dispatch({ type: 'SET_MOVIES', movies: mov });\r\n            });\r\n        }\r\n        if (species.length > 0) {\r\n          getContent(species)\r\n            .then(spec => {\r\n              dispatch({ type: 'SET_SPECIES', species : spec });\r\n            });\r\n        }\r\n        if (homeworld) {\r\n          getContent(homeworld)\r\n            .then(homeworldData => {\r\n              dispatch({ type: 'SET_HOMEWORLD', homeworld : homeworldData });\r\n            });\r\n        }\r\n      })\r\n      .catch(error => \r\n        dispatch({ type: 'STATE_PERSON_ERROR', data: error })\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\nexport function GET_PERSON(id) {\r\n  return (dispatch) => {\r\n    dispatch({ type: 'CHANGE_PERSON_LOADER_STATE', status: true });\r\n    var notPresent = true;\r\n    var getList = JSON.parse(localStorage.getItem(\"personList\"));\r\n    if (getList && getList.idList.length > 0) {\r\n      for (let i = 0; i < getList.idList.length; i++) {\r\n        if (id === getList.idList[i]) {\r\n          notPresent = false;\r\n          dispatch({ type: 'CHANGE_PERSON_DATA', data: getList.pdList[i] });\r\n\r\n          let pdListTemp = getList.pdList[i];\r\n          let films = pdListTemp.films ? pdListTemp.films : [];\r\n          let species = pdListTemp.species ? pdListTemp.species : [];\r\n\r\n          if (films.length > 0) {\r\n            getContent(films)\r\n              .then(mov => {\r\n                dispatch({ type: 'SET_MOVIES', movies: mov });\r\n              });\r\n          }\r\n          if (species.length > 0) {\r\n            getContent(species)\r\n              .then(spec => {\r\n                dispatch({ type: 'SET_SPECIES', species : spec });\r\n              });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (notPresent) {\r\n      return getPerson(id)\r\n      .then(res => {\r\n        dispatch({ type: 'CHANGE_PERSON_DATA', data: res });\r\n        new Promise(function(resolve, reject){\r\n          setLocalPeopleData(res);\r\n        });\r\n        var films = res.films || [];\r\n        var species = res.species || [];\r\n        if (films.length > 0) {    \r\n          getContent(films)\r\n            .then(mov => {\r\n              dispatch({ type: 'SET_MOVIES', movies: mov });\r\n            });\r\n\r\n        }\r\n        if (species.length > 0) {\r\n          getContent(species)\r\n            .then(spec => {\r\n              dispatch({ type: 'SET_SPECIES', species : spec });\r\n            });\r\n        }\r\n      })\r\n      .catch(error => \r\n        dispatch({ type: 'STATE_PERSON_ERROR', data: error })\r\n      );\r\n    }\r\n  }\r\n}\r\n*/\r\nexport function SET_PERSON(id){\r\n  return dispatch => dispatch({ type: 'CHANGE_PERSON', id: id});\r\n}\r\n ","import React from 'react';\r\n\r\nexport default () => (\r\n  <div className=\"header__wrapper\">\r\n    <div className=\"container\">\r\n      <div className=\"init__animator\">\r\n        <div className=\"header__border\">\r\n          <div className=\"border__inner\">\r\n            <div className=\"logo__wrap\">\r\n              <img\r\n                src=\"images/logo.svg\"\r\n                className=\"xLogo img-xl\"\r\n                alt=\"Stars Wars API\"\r\n              />\r\n            </div>\r\n            <h1 className=\"logo__text\">API</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SET_PERSON } from '../Actions';\r\n\r\nfunction InputField(props){\r\n  const [ input, setInput ] = useState(props.personID);\r\n\r\n  useEffect(() => {\r\n    setInput(props.personID);\r\n  }, [props.personID]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <input \r\n        className=\"main__input\"\r\n        type=\"text\" \r\n        placeholder=\"Enter Number from 1 to 87\" \r\n        onChange={e => props.SET_PERSON(e.target.value)} \r\n        value={input} \r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(state=>({personID:state.personID}), dispatch=>({SET_PERSON: id => dispatch(SET_PERSON(id))}))(InputField);","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getIdFromUrl } from '../utils';\r\nimport { GET_PERSON } from \"../Actions\";\r\n\r\nfunction DefaultPersons({peopleData, getPerson}){\r\n  const [people, setPeople] = useState(peopleData);\r\n\r\n  useEffect(() => {\r\n    setPeople(peopleData);\r\n  }, [peopleData]);\r\n\r\n  const setViewId = (e) => {\r\n    e.preventDefault();\r\n    var id = e.currentTarget.getAttribute('data-pid');\r\n    getPerson(id);\r\n  };\r\n\r\n  if (Object.keys(people).length > 0) {\r\n    let keys = Object.keys(people);\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"heading__wrap\">\r\n          <div className=\"pr-inner\">\r\n            <p className=\"id-text\">ID</p>\r\n            <p className=\"pr-name\">Name</p>\r\n            <p className=\"pr-gender\">Gender</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"people__wrap\">\r\n          <div className=\"people__block\">\r\n            {\r\n              keys.map((key, indx) =>{\r\n                let pRow = people[key];\r\n                let id = key;\r\n                return (\r\n                  <div key={indx+1} id={indx+1+\"-pr-card\"} className=\"pr-card\">\r\n                    <div className=\"pr-inner\">\r\n                      <p className=\"id-text\">{id}</p>\r\n                      <p className=\"pr-name\">{pRow.name}</p>\r\n                      <p className=\"pr-gender\">{pRow.gender === 'n/a' ? \":(\" : pRow.gender}</p>\r\n                      <a data-pid={id} onClick={(e) => setViewId(e)} className=\"view__btn\">View</a>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"p-loader__wrap\">\r\n          <p className=\"leftWrap\">Getting Content...</p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  // mapsStateToProps\r\n  state => ({peopleData: state.persons}),\r\n  { getPerson: GET_PERSON }\r\n)(DefaultPersons);\r\n\r\n/*\r\n<div className=\"arrow left__arrow\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"20\" viewBox=\"0 0 14 24\">\r\n              <path fill=\"#666\" fill-rule=\"evenodd\" d=\"M11.336 0L14 2.82 5.347 12 14 21.18 11.336 24 0 12z\"></path>\r\n            </svg>\r\n          </div>\r\n<div className=\"arrow right__arrow\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"20\" viewBox=\"0 0 14 24\"><path fill=\"#666\" fill-rule=\"evenodd\" d=\"M2.664 0L0 2.82 8.653 12 0 21.18 2.664 24 14 12z\"></path></svg>\r\n          </div>\r\n\r\n\r\n          <div className=\"load-more__section\">\r\n              <a className=\"load-more__btn\">Load More</a>\r\n            </div>\r\n*/","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getIdFromUrl } from '../utils';\r\n\r\nfunction PersonTable(props){\r\n\r\n  const [person, setPerson] = useState(props.personData);\r\n  const [speciesData, setSpeciesData] = useState({});\r\n  const [filmsData, setFilmsData] = useState({});\r\n  const [ homeworld, setHome ] = useState({});\r\n\r\n  useEffect(() => {\r\n    setPerson(props.personData);\r\n    setSpeciesData(props.species);\r\n    setFilmsData(props.movies);\r\n    setHome(props.homeworld);\r\n  }, [props.species, props.movies, props.personData, props.homeworld]);\r\n  // [props.personData]); \r\n\r\n  const setContent = () => {\r\n    let height = person.height;\r\n    let mass = person.mass;\r\n    if (height !== 'unknown' && mass !== 'unknown') {\r\n      return `${height}cm / ${mass}kg`;\r\n    } else {\r\n      return `:(`;\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"person__wrap\">\r\n      <div className=\"person__details\">\r\n        <div className=\"result__text\">\r\n          <p>Result id: {getIdFromUrl(person.url) ? getIdFromUrl(person.url) : \"\"}</p>\r\n        </div>\r\n        <div className=\"ColWrap p-name\">\r\n          <div className=\"rightWrap\">\r\n            <p>{person.name}<span className=\"in__gender\">{` (${person.gender[0]})`}</span></p>\r\n          </div>\r\n        </div>\r\n        <div className=\"rowWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Date Of Birth </p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            <p>{person.birth_year}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"rowWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Type</p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            {\r\n              speciesData.length > 0 ? \r\n              speciesData.map((data, i) => \r\n                <p key={i} id={i}>{data.name}</p>\r\n              )\r\n              :\r\n              <p>Dont know yet!</p>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"rowWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Height and Mass </p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            <p>{setContent()}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"rowWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Homeworld</p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            <p>{homeworld.name ? homeworld.name : \"Don't know yet\"}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"rowWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Looks </p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            <p>\r\n              {`Eye Color : ${person.eye_color},`}\r\n              <br />\r\n              {`Hair Color: ${person.hair_color},`}\r\n              <br />\r\n              {`Skin Color: ${person.skin_color}`}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"ColWrap\">\r\n          <div className=\"leftWrap\">\r\n            <p>Films </p>\r\n          </div>\r\n          <div className=\"rightWrap\">\r\n            {\r\n              (filmsData.length > 0) \r\n              ?\r\n              filmsData.sort((a,b)=> {\r\n                // if (isEmpty(a)) return -1;\r\n                // if (isEmpty(b)) return 1; \r\n                return (a.release_date.split(\"-\")[0] - b.release_date.split(\"-\")[0])\r\n              }).map((val, index) => (\r\n                <p key={index + 1}>{`${val.title} (${val.release_date.split(\"-\")[0]})`}</p>\r\n              )) \r\n              :\r\n              <p>Dont know yet!</p> \r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// export default PersonTable;\r\n\r\nexport default connect(\r\n  // mapsStateToProps\r\n  state => ({\r\n    // personData: state.personData,\r\n    movies: state.movies,\r\n    species: state.species,\r\n    homeworld: state.homeworld\r\n  })\r\n)(PersonTable);\r\n/*\r\nfunction PersonTable(props){\r\n  const [person, setPerson] = useState({});\r\n  const [filmsData, setFilmData] = useState([]);\r\n  const [speciesData, setSpeciesData] = useState([]);\r\n  var flag = true;\r\n  // const controller = new AbortController();\r\n  // var signal = controller.signal;\r\n  \r\n  useEffect(() => {\r\n    if (props.personData !== person) {\r\n      filmsArrange();\r\n      speciesArrange();\r\n      setPerson(props.personData);\r\n    }\r\n    return () => {\r\n      flag = false;\r\n      // controller.abort();\r\n    };\r\n  }, [props.personData]);\r\n\r\n  // const resolvedHeight = () => {\r\n  //   var tp_seelctor = document.querySelector(\".tb__inner\");\r\n  //   var personWrap =  document.querySelector(\".person__wrap\");\r\n  //   if (tp_seelctor && personWrap) {\r\n  //     tp_seelctor.style.height = `${personWrap.style.height}px`;\r\n  //   }\r\n  // }\r\n}\r\n\r\nclass PersonTable extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      person: {},\r\n      filmsData: [],\r\n      speciesData: [],\r\n      apiFilmFlag: false,\r\n      apiSpeciesFlag: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    console.log(\"\\n@@@@@@@@@@@@@@@@@\\n\", prevState, this.props);\r\n    // console.log(\"Enterd\", prevProps.person.name,  this.props.personData.name);\r\n    if (prevState.person.name !== this.props.personData.name) {\r\n      // var filmsData = getContentFromUrl(this.props.personData.films);\r\n      var arrFilms = [];\r\n      for (let i = 0; i < this.props.personData.films.length; i++) {\r\n        Xhr(this.props.personData.films[i])\r\n        .then(res => {\r\n          arrFilms.push(res);\r\n          if (arrFilms.length === this.props.personData.films.length) {\r\n            this.setState((prevState) => ({\r\n              filmsData: [...prevState.filmsData, ...arrFilms],\r\n              apiFilmFlag: true\r\n            }));  \r\n          }\r\n        })\r\n        .catch(err => console.log(err))\r\n        // this.setState({filmsData: arr});\r\n      }\r\n      var arrSpecies = [];\r\n      for (let i = 0; i < this.props.personData.species.length; i++) {\r\n        Xhr(this.props.personData.species[i])\r\n        .then(res => {\r\n          arrSpecies.push(res);\r\n\r\n          if (arrSpecies.length === this.props.personData.species.length) {\r\n            this.setState((prevState) => ({\r\n              speciesData: [...prevState.speciesData, ...arrSpecies],\r\n              apiSpeciesFlag: true\r\n            }));\r\n          }\r\n        })\r\n        .catch(err => console.log(err))\r\n        // this.setState({filmsData: arr});\r\n      }\r\n    }\r\n  }\r\n\r\n  // shouldComponentUpdate(nextProps, nextState){\r\n  //   console.log(\"IN State\", nextProps);\r\n  //   if (this.state.person.name !== nextProps.personData.name) {\r\n  //     this.setState({\r\n  //       person: nextProps.personData\r\n  //     });\r\n  //     return true;\r\n  //   }\r\n  //   return false;\r\n  // }\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.personData.name !== prevState.person.name) {\r\n      console.log(prevState);\r\n      return { ...prevState, person: nextProps.personData, filmsData: [], speciesData: [], apiFilmFlag: false, apiSpeciesFlag: false};\r\n    }\r\n    else if (nextProps.personError !== prevState.personError) {\r\n      return { ...prevState, filmsData: [],\r\n        speciesData: [], apiFilmFlag: false, apiSpeciesFlag: false, personError: nextProps.personError };\r\n    }\r\n    else return { prevState };\r\n\t}\r\n\r\n  setContent = () => {\r\n    let height = this.state.person.height;\r\n    let mass = this.state.person.mass;\r\n    if (height !== 'unknown' && mass !== 'unknown') {\r\n      return `${height}cm / ${mass}kg`;\r\n    } else {\r\n      return `:(`;\r\n    }\r\n  }\r\n\r\n  render(){\r\n    let person = this.state.person; \r\n    let heightMass = this.setContent();\r\n    return (\r\n      <div className=\"person__wrap\">\r\n        <div className=\"person__details\">\r\n          <div className=\"result__text\">\r\n            <p>Result id: {getIdFromUrl(person.url) ? getIdFromUrl(person.url) : \"\"}</p>\r\n          </div>\r\n          <div className=\"ColWrap p-name\">\r\n            <div className=\"rightWrap\">\r\n              <p>{person.name}<span className=\"in__gender\">{` (${person.gender[0]})`}</span></p>\r\n            </div>\r\n          </div>\r\n          <div className=\"rowWrap\">\r\n            <div className=\"leftWrap\">\r\n              <p>Date Of Birth </p>\r\n            </div>\r\n            <div className=\"rightWrap\">\r\n              <p>{person.birth_year}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"rowWrap\">\r\n            <div className=\"leftWrap\">\r\n              <p>Type</p>\r\n            </div>\r\n            <div className=\"rightWrap\">\r\n              {\r\n                this.state.apiSpeciesFlag &&\r\n                this.state.speciesData.length > 0 ? \r\n                this.state.speciesData.map((data, i) => \r\n                  <p key={i} id={i}>{data.name}</p>\r\n                )\r\n                :\r\n                <p>Dont know yet!</p>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className=\"rowWrap\">\r\n            <div className=\"leftWrap\">\r\n              <p>Height and Mass </p>\r\n            </div>\r\n            <div className=\"rightWrap\">\r\n              <p>{heightMass}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"rowWrap\">\r\n            <div className=\"leftWrap\">\r\n              <p>Looks </p>\r\n            </div>\r\n            <div className=\"rightWrap\">\r\n              <p>\r\n                {`Eye Color : ${person.eye_color},`}\r\n                <br />\r\n                {`Hair Color: ${person.hair_color},`}\r\n                <br />\r\n                {`Skin Color: ${person.skin_color}`}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"ColWrap\">\r\n            <div className=\"leftWrap\">\r\n              <p>Films </p>\r\n            </div>\r\n            <div className=\"rightWrap\">\r\n              {\r\n                (this.state.apiFilmFlag && this.state.filmsData.length > 0) \r\n                ?\r\n                this.state.filmsData.sort((a,b)=> {\r\n                  return (a.release_date.split(\"-\")[0] - b.release_date.split(\"-\")[0])\r\n                }).map((val, index) => (\r\n                  <p key={index + 1}>{`${val.title} (${val.release_date.split(\"-\")[0]})`}</p>\r\n                )) \r\n                :\r\n                <p>Dont know yet!</p> \r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default connect(\r\n  // mapsStateToProps\r\n  state => ({\r\n    personData: state.personData,\r\n  })\r\n)(PersonTable);\r\n*/\r\n\r\n/*\r\n  // filmsArrange = () => {\r\n  //   console.log(person);\r\n  //   if (!isEmpty(person)) {\r\n  //     if (person.films.length !== 0) {\r\n  //       let arr = getContentFromUrl(person.films);\r\n  //       if (flag) {\r\n  //         // setFilmData(arr);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // speciesArrange = () => {\r\n  //   console.log(person);\r\n  //   if (!isEmpty(person)) {\r\n  //     if (person.species.length !== 0) {\r\n  //       let arr = getContentFromUrl(person.species);\r\n  //       if (flag) {\r\n  //         // setSpeciesData(arr);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\ncomponentDidMount() {\r\n  console.log(\"__________mounted\");\r\n  if (!isEmpty(this.props.person && this.state.apiFilmFlag)) {\r\n    var arrFilms = [];\r\n    for (let i = 0; i < this.props.personData.films.length; i++) {\r\n      Xhr(this.props.personData.films[i])\r\n      .then(res => {\r\n        arrFilms.push(res);\r\n\r\n        if (arrFilms.length === this.props.personData.films.length) {\r\n          this.setState((prevState) => ({\r\n            filmsData: [...prevState.filmsData, ...arrFilms],\r\n            apiFilmFlag: true\r\n          }));  \r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n      // this.setState({filmsData: arr});\r\n    }\r\n    var arrSpecies = [];\r\n    for (let i = 0; i < this.props.personData.species.length; i++) {\r\n      Xhr(this.props.personData.species[i])\r\n      .then(res => {\r\n        arrSpecies.push(res);\r\n\r\n        if (arrSpecies.length === this.props.personData.species.length) {\r\n          this.setState((prevState) => ({\r\n            speciesData: [...prevState.speciesData, ...arrSpecies],\r\n            apiSpeciesFlag: true\r\n          }));\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n      // this.setState({filmsData: arr});\r\n    }\r\n  }\r\n}\r\n*/","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction PersonLoader(props){\r\n  const [loaderState, setLoaderState] = useState(props.loaderState);\r\n\r\n  useEffect(() => {\r\n    setLoaderState(props.loaderState);\r\n  }, [props.loaderState]);\r\n\r\n  return (\r\n    <div className={`person__loader ${loaderState ? `fadIn` : `fadOut`}`}>\r\n      <div className=\"person-loader__inner\">\r\n        <p>Loading Content...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(state=>({loaderState: state.loaderState.getPersonState}))(PersonLoader);","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { isEmpty } from '../utils';\r\n\r\n\r\nimport PersonTable from \"./PersonTable\";\r\nimport PersonLoader from \"./PersonLoader\";\r\n\r\n// class PersonDetails extends React.Component {\r\nfunction PersonDetails(props) {\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         loaderState: false,\r\n    //         personData: {}\r\n    //     };\r\n    // }\r\n    const [loaderState, setLoader] = useState(props.loaderState);\r\n    const [personData, setPerson] = useState(props.personData);\r\n    const [personError, setError] = useState(props.personError);\r\n\r\n    useEffect(() => {\r\n        setLoader(props.loaderState);\r\n        setPerson(props.personData);\r\n        setError(props.personError);\r\n    }, [props.loaderState, props.personData, props.personError]);\r\n\r\n    if (personError &&  personError.status) {\r\n        return (\r\n            <div className=\"default-person__wrap\">\r\n                <div className=\"leftWrap\">Could Not Find :(</div>\r\n            </div>\r\n        );\r\n    } else if (!isEmpty(personData)) {\r\n        return (\r\n            <React.Fragment>\r\n                {loaderState ? <PersonLoader /> : <PersonTable personData={personData}/>}\r\n            </React.Fragment>\r\n        );\r\n    } else if (!loaderState) {\r\n        return (\r\n            <div className=\"default-person__wrap\">\r\n                <div className=\"leftWrap\">No Person Yet..</div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <PersonLoader />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loaderState: state.loaderState.getPersonState,\r\n        personData: state.personData,\r\n        personError: state.error.getPersonState\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(PersonDetails);\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { GET_PERSON, GET_PEOPLE } from \"./Actions\";\nimport { getIdFromUrl } from \"./utils\";\n\nimport Header from \"./components/Header\";\nimport InputField from \"./components/InputField\";\nimport DefaultPersons from \"./components/DefaultPersons\";\nimport PersonDetails from \"./components/PersonDetails\";\n\nfunction App(props) {\n  const [id, setId] = useState(props.personID);\n  const [toggleWidgetState, setToggleWidgetState] = useState(true);\n  const [ personData, setPerson ] = useState({});\n  useEffect(() => {\n    setId(props.personID);\n    setPerson(props.personData);\n  }, [props.personID, props.personData]);\n\n  const getPersonSubmit = e => {\n    e.preventDefault();\n    let fetchedId = getIdFromUrl(personData.url);\n    if (fetchedId !== id) {\n      props.getPerson(id);\n    }\n  };\n\n  const toggleWidget = e => {\n    var defaultList = document.querySelector(\".default__list\");\n    if (toggleWidgetState === false) {\n      defaultList.classList.add(\"moveup\");\n      defaultList.classList.remove(\"movedown\");\n      defaultList.classList.add(\"active\");\n      setToggleWidgetState(true);\n    } else {\n      defaultList.classList.add(\"movedown\");\n      defaultList.classList.remove(\"moveup\");\n      defaultList.classList.remove(\"active\");\n      setToggleWidgetState(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"user__section\">\n        <div className=\"container\">\n          <h1 className=\"user__h1\">Search By </h1><h1 className=\"user__h1 scale__in\">ID</h1>\n          <div className=\"input__wrapper\">\n            <InputField />\n            {id === \"\" || isNaN(id) || parseInt(id) < 1 || parseInt(id) > 88 ? (\n              <button className=\"main__btn\" onClick={e => getPersonSubmit(e)} disabled>\n                GO!\n              </button>\n            ) : (\n              <button className=\"main__btn\" onClick={e => getPersonSubmit(e)}>GO!</button>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"person__Table-wrap\">\n        <div className=\"container\">\n          <div className=\"tb__inner\">\n            <PersonDetails />\n          </div>\n        </div>\n      </div>\n      <div className=\"default__list moveup active\">\n        <h3 className=\"pr-heading\">Star Wars Family</h3>\n        <p className=\"toggle_list\" onClick={e=>toggleWidget(e)}>{toggleWidgetState ? 'Hide' : 'see more'}</p>\n          <DefaultPersons />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    personID: state.personID,\n    personData: state.personData\n  };\n};\n\nconst mapDispatchToProps = {\n  getPerson: GET_PERSON\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n// export default App; <DefaultPersons />\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst CHANGE_PERSON = \"CHANGE_PERSON\";\r\nconst CHANGE_PERSON_DATA = \"CHANGE_PERSON_DATA\";\r\nconst ADD_PERSONS = \"ADD_PERSONS\";\r\nconst CHANGE_PEOPLE_LOADER_STATE = \"CHANGE_PEOPLE_LOADER_STATE\";\r\nconst CHANGE_PERSON_LOADER_STATE = \"CHANGE_PERSON_LOADER_STATE\";\r\nconst STATE_PEOPLE_ERROR = \"STATE_PEOPLE_ERROR\";\r\nconst STATE_PERSON_ERROR = \"STATE_PERSON_ERROR\";\r\n\r\nconst SET_MOVIES = \"SET_MOVIES\";\r\nconst SET_SPECIES = \"SET_SPECIES\";\r\nconst SET_HOMEWORLD = \"SET_HOMEWORLD\";\r\n\r\n\r\nconst defaultErrorState = {\r\n  getPeopleState: {},\r\n  getPersonState: {}\r\n};\r\n\r\nconst initState = {\r\n  loaderState: {\r\n    getPeopleState: false,\r\n    getPersonState: false\r\n  },\r\n  error: defaultErrorState,\r\n  personID: \"\",\r\n  personData: {},\r\n  movies: [],\r\n  species: [],\r\n  homeworld: {},\r\n  persons: {}\r\n};\r\n\r\nconst swReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    \r\n    // change input value {\r\n    case CHANGE_PERSON:\r\n      // return {\r\n      //   ...state,\r\n      //   personID : action.id\r\n      // }\r\n      return Object.assign({}, state, {\r\n        // personData: {},\r\n        error: Object.assign({}, state.error, {\r\n          getPersonState: {}\r\n        }),\r\n        personID: action.id\r\n      });\r\n\r\n    // }\r\n\r\n    // add person data\r\n    case CHANGE_PERSON_DATA:\r\n      if (typeof action.data === \"object\")\r\n        // return {\r\n        //   ...state,\r\n        //   personData: Object.assign({}, action.data)\r\n        // }\r\n        return Object.assign({}, state, {\r\n          loaderState: Object.assign({}, state.loaderState, {\r\n            getPersonState: false\r\n          }),\r\n          error: Object.assign({}, state.error, {\r\n            getPersonState: {}\r\n          }),\r\n          personData: Object.assign({}, action.data),\r\n          movies: [],\r\n          species: []\r\n        });\r\n      else return state;\r\n\r\n    // \r\n\r\n    // add peoples\r\n    case ADD_PERSONS:\r\n      if (action.persons !== {})\r\n        // return {\r\n        //   ...state,\r\n        //   persons : action.persons\r\n        // }\r\n        return Object.assign({}, state, {\r\n          loaderState: Object.assign({}, state.loaderState, {\r\n            getPeopleState: false\r\n          }),\r\n          error: Object.assign({}, state.error, {\r\n            getPeopleState: {}\r\n          }),\r\n          persons: action.persons\r\n          // persons: action.persons\r\n        });\r\n      else return state;\r\n\r\n    // \r\n\r\n    // change people loader state \r\n    case CHANGE_PEOPLE_LOADER_STATE:\r\n      if (action.status !== undefined)\r\n        // return {\r\n        //   ...state,\r\n        //   loaderState: action.status\r\n        // }\r\n        return Object.assign({}, state, {\r\n          error: Object.assign({}, state.error, {\r\n            getPeopleState: {}\r\n          }),\r\n          loaderState: Object.assign({}, state.loaderState, {\r\n            getPeopleState: action.status\r\n          })\r\n        });\r\n      else return state;\r\n\r\n    // \r\n\r\n    // change person loader state\r\n    case CHANGE_PERSON_LOADER_STATE:\r\n      if (action.status !== undefined)\r\n        // return {\r\n        //   ...state,\r\n        //   loaderState: action.status\r\n        // }\r\n        return Object.assign({}, state, {\r\n          error: Object.assign({}, state.error, {\r\n            getPersonState: {}\r\n          }),\r\n          loaderState: Object.assign({}, state.loaderState, {\r\n            getPersonState: action.status\r\n          }),\r\n          personData: {}\r\n        });\r\n      else return state;\r\n    \r\n    // \r\n\r\n    // change people error state \r\n    case STATE_PEOPLE_ERROR:\r\n      return Object.assign({}, state, {\r\n        error: Object.assign({}, state.error, {\r\n          getPeopleState: action.data\r\n        }),\r\n        loaderState: Object.assign({}, state.loaderState, {\r\n          getPeopleState: false\r\n        })\r\n      });\r\n\r\n    // \r\n\r\n    // change people error state\r\n    case STATE_PERSON_ERROR:\r\n      return Object.assign({}, state, {\r\n        error: Object.assign({}, state.error, {\r\n          getPersonState: action.data\r\n        }),\r\n        loaderState: Object.assign({}, state.loaderState, {\r\n          getPersonState: false\r\n        })\r\n      });\r\n\r\n    // set movies\r\n    case SET_MOVIES:\r\n      return Object.assign({}, state, {\r\n        movies: action.movies\r\n      });\r\n\r\n    // set Species\r\n    case SET_SPECIES:\r\n      return Object.assign({}, state, {\r\n        species: action.species\r\n      });\r\n\r\n    // set Homeworld\r\n    case SET_HOMEWORLD:\r\n      return Object.assign({}, state, {\r\n        homeworld: action.homeworld\r\n      });\r\n\r\n    // \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// export default createStore(swReducer, applyMiddleware(thunk));\r\n\r\nexport default () => {\r\n  const store = createStore(swReducer, applyMiddleware(thunk));\r\n  return store;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './Store';\nimport { Provider } from 'react-redux';\nimport { GET_PEOPLE } from './Actions';\nimport { isEmpty } from './utils';\n\nconst store = Store();\n\nstore.dispatch(GET_PEOPLE());\n\nvar tempInterval = setInterval(()=>{\n  var state = store.getState();\n  if (!isEmpty(state.error.getPeopleState)) {\n    store.dispatch(GET_PEOPLE()); \n  }\n  else {\n    clearInterval(tempInterval);\n  }\n}, 15000);\n\n// store.dispatch(GET_PERSON(1));\n// store.dispatch(SET_PERSON(1));\n\nstore.subscribe(() => {\n  const state = store.getState();\n  console.log(state);\n});\n\nconst Main = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(Main, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}